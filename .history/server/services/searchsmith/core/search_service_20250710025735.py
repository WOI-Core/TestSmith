# core/search_service.py
from .services.gemini_service import GeminiService
from .services.supabase_service import SupabaseService

class SearchService:
    def __init__(self):
        self.gemini_service = GeminiService()
        self.supabase_service = SupabaseService()

    def hybrid_search(self, query: str, top_k: int = 10):
        """
        ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Hybrid-Semantic Search ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ Query Expansion
        """
        # 1. üÜï ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏° Query ‡πÄ‡∏î‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢ AI
        expanded_terms_str = self.gemini_service.expand_query(query)
        
        # 2. üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á Full Query ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        #    ‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
        full_query = f"{query} {expanded_terms_str.replace(',', ' ')}"
        print(f"--- Using full query for search: '{full_query}' ---")

        # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á embedding ‡∏à‡∏≤‡∏Å Full Query ‡πÉ‡∏´‡∏°‡πà
        query_embedding = self.gemini_service.get_embedding(full_query)
        
        # 4. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏ô Supabase ‡∏î‡πâ‡∏ß‡∏¢ Full Query ‡πÉ‡∏´‡∏°‡πà
        results = self.supabase_service.hybrid_search(
            query_text=full_query, # ‡πÉ‡∏ä‡πâ query ‡∏ó‡∏µ‡πà‡∏Ç‡∏¢‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß
            query_embedding=query_embedding,
            top_k=top_k
        )

        problem_names = [item['problem_name'] for item in results]
        return problem_names