[BaseRepository] Error updating record 17 in submissions: {
  code: 'PGRST116',
  details: 'The result contains 0 rows',
  hint: null,
  message: 'JSON object requested, multiple (or no) rows returned'
}
[Judge] Error during judging submission 17: {
  code: 'PGRST116',
  details: 'The result contains 0 rows',
  hint: null,
  message: 'JSON object requested, multiple (or no) rows returned'
}
[BaseRepository] Error updating record 17 in submissions: {
  code: 'PGRST116',
  details: 'The result contains 0 rows',
  hint: null,
  message: 'JSON object requested, multiple (or no) rows returned'
}
[BaseRepository] Error updating record 17 in submissions: {
  code: 'PGRST116',
  details: 'The result contains 0 rows',
  hint: null,
  message: 'JSON object requested, multiple (or no) rows returned'
}
[BaseRepository] Error updating record 17 in submissions: {
  code: 'PGRST116',
  details: 'The result contains 0 rows',
  hint: null,
  message: 'JSON object requested, multiple (or no) rows returned'
}
[BaseRepository] Error updating record 17 in submissions: {
  code: 'PGRST116',
  details: 'The result contains 0 rows',
  hint: null,
  message: 'JSON object requested, multiple (or no) rows returned'
}
[BaseRepository] Error updating record 17 in submissions: {
  code: 'PGRST116',
  details: 'The result contains 0 rows',
  hint: null,
  message: 'JSON object requested, multiple (or no) rows returned'
}
[BaseRepository] Error updating record 17 in submissions: {
  code: 'PGRST116',
  details: 'The result contains 0 rows',
  hint: null,
  message: 'JSON object requested, multiple (or no) rows returned'
}
[BaseRepository] Error updating record 17 in submissions: {
  code: 'PGRST116',
  details: 'The result contains 0 rows',
  hint: null,
  message: 'JSON object requested, multiple (or no) rows returned'
}
[BaseRepository] Error updating record 17 in submissions: {
  code: 'PGRST116',
  details: 'The result contains 0 rows',
  hint: null,
  message: 'JSON object requested, multiple (or no) rows returned'
}
[BaseRepository] Error updating record 17 in submissions: {
  code: 'PGRST116',
  details: 'The result contains 0 rows',
  hint: null,
  message: 'JSON object requested, multiple (or no) rows returned'
}
Could not download config for cuttingwoodtemicide: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for khaslana: {}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 1: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/9681405e-d3cb-44d5-aff9-4e9a6c00940b',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/9681405e-d3cb-44d5-aff9-4e9a6c00940b?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/9681405e-d3cb-44d5-aff9-4e9a6c00940b?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/9681405e-d3cb-44d5-aff9-4e9a6c00940b?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/9681405e-d3cb-44d5-aff9-4e9a6c00940b?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 146104,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 1474,
        [Symbol(triggerId)]: 1472,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': '1b46cfb3-a7f6-455a-96c9-1bc05b4e5a10',
      'x-runtime': '0.003137',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/9681405e-d3cb-44d5-aff9-4e9a6c00940b',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/9681405e-d3cb-44d5-aff9-4e9a6c00940b?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/9681405e-d3cb-44d5-aff9-4e9a6c00940b?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 2: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/fbdaa0a1-528d-4f2a-a913-cf871ac0746e',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/fbdaa0a1-528d-4f2a-a913-cf871ac0746e?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/fbdaa0a1-528d-4f2a-a913-cf871ac0746e?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/fbdaa0a1-528d-4f2a-a913-cf871ac0746e?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/fbdaa0a1-528d-4f2a-a913-cf871ac0746e?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 148270,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 2098,
        [Symbol(triggerId)]: 2096,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': '5b0dfc6b-6d87-4035-a799-e0a62265bf87',
      'x-runtime': '0.002999',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/fbdaa0a1-528d-4f2a-a913-cf871ac0746e',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/fbdaa0a1-528d-4f2a-a913-cf871ac0746e?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/fbdaa0a1-528d-4f2a-a913-cf871ac0746e?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 3: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/e7477e83-cdf6-4e49-893a-7d25b53b6f85',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/e7477e83-cdf6-4e49-893a-7d25b53b6f85?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/e7477e83-cdf6-4e49-893a-7d25b53b6f85?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/e7477e83-cdf6-4e49-893a-7d25b53b6f85?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/e7477e83-cdf6-4e49-893a-7d25b53b6f85?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 150454,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 2724,
        [Symbol(triggerId)]: 2722,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': '2d2ece87-294a-4093-b188-b4d0d9b42cea',
      'x-runtime': '0.003263',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/e7477e83-cdf6-4e49-893a-7d25b53b6f85',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/e7477e83-cdf6-4e49-893a-7d25b53b6f85?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/e7477e83-cdf6-4e49-893a-7d25b53b6f85?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 4: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/e3e80625-20d6-4f43-b7be-75ca66903c72',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/e3e80625-20d6-4f43-b7be-75ca66903c72?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/e3e80625-20d6-4f43-b7be-75ca66903c72?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/e3e80625-20d6-4f43-b7be-75ca66903c72?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/e3e80625-20d6-4f43-b7be-75ca66903c72?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 152624,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 3345,
        [Symbol(triggerId)]: 3343,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': '5d34940e-f9a7-4235-869a-ae26c306e2b9',
      'x-runtime': '0.003317',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/e3e80625-20d6-4f43-b7be-75ca66903c72',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/e3e80625-20d6-4f43-b7be-75ca66903c72?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/e3e80625-20d6-4f43-b7be-75ca66903c72?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 5: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/1b49c855-9363-4dbe-a69a-161dbebf857b',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/1b49c855-9363-4dbe-a69a-161dbebf857b?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/1b49c855-9363-4dbe-a69a-161dbebf857b?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/1b49c855-9363-4dbe-a69a-161dbebf857b?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/1b49c855-9363-4dbe-a69a-161dbebf857b?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 154808,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 3968,
        [Symbol(triggerId)]: 3966,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': '0072ca1d-919b-4b6d-aabc-cf1384e0e352',
      'x-runtime': '0.003046',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/1b49c855-9363-4dbe-a69a-161dbebf857b',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/1b49c855-9363-4dbe-a69a-161dbebf857b?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/1b49c855-9363-4dbe-a69a-161dbebf857b?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for khaslana: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for cuttingwoodtemicide: {}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 1: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/a97f0315-2722-418d-aac3-1cf8035abb5c',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/a97f0315-2722-418d-aac3-1cf8035abb5c?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/a97f0315-2722-418d-aac3-1cf8035abb5c?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/a97f0315-2722-418d-aac3-1cf8035abb5c?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/a97f0315-2722-418d-aac3-1cf8035abb5c?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 281807,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 8039,
        [Symbol(triggerId)]: 8037,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': '6a2606c9-dcfd-4863-9658-7521ddb529da',
      'x-runtime': '0.004431',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/a97f0315-2722-418d-aac3-1cf8035abb5c',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/a97f0315-2722-418d-aac3-1cf8035abb5c?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/a97f0315-2722-418d-aac3-1cf8035abb5c?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 2: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/5f3e762c-37da-4407-908d-8a74e7bbd17f',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/5f3e762c-37da-4407-908d-8a74e7bbd17f?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/5f3e762c-37da-4407-908d-8a74e7bbd17f?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/5f3e762c-37da-4407-908d-8a74e7bbd17f?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/5f3e762c-37da-4407-908d-8a74e7bbd17f?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 283976,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 8663,
        [Symbol(triggerId)]: 8661,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': '22429696-2907-48b1-81f4-b00417597acd',
      'x-runtime': '0.002963',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/5f3e762c-37da-4407-908d-8a74e7bbd17f',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/5f3e762c-37da-4407-908d-8a74e7bbd17f?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/5f3e762c-37da-4407-908d-8a74e7bbd17f?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 3: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/aa93b5ef-3a97-4e1e-b831-6a4edddeb2e9',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/aa93b5ef-3a97-4e1e-b831-6a4edddeb2e9?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/aa93b5ef-3a97-4e1e-b831-6a4edddeb2e9?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/aa93b5ef-3a97-4e1e-b831-6a4edddeb2e9?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/aa93b5ef-3a97-4e1e-b831-6a4edddeb2e9?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 286200,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 9289,
        [Symbol(triggerId)]: 9287,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': 'dfd4d407-ba62-401e-92a3-f678cb7a5d0c',
      'x-runtime': '0.004409',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/aa93b5ef-3a97-4e1e-b831-6a4edddeb2e9',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/aa93b5ef-3a97-4e1e-b831-6a4edddeb2e9?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/aa93b5ef-3a97-4e1e-b831-6a4edddeb2e9?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 4: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/0239dd86-2b9a-4808-b69d-42b08555330e',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/0239dd86-2b9a-4808-b69d-42b08555330e?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/0239dd86-2b9a-4808-b69d-42b08555330e?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/0239dd86-2b9a-4808-b69d-42b08555330e?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/0239dd86-2b9a-4808-b69d-42b08555330e?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 288481,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 9912,
        [Symbol(triggerId)]: 9910,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': 'ba83f694-c14d-4e22-b5fe-23a640513ce3',
      'x-runtime': '0.004507',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/0239dd86-2b9a-4808-b69d-42b08555330e',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/0239dd86-2b9a-4808-b69d-42b08555330e?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/0239dd86-2b9a-4808-b69d-42b08555330e?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 5: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/183cfea4-9421-45bf-bf15-1c7efa9e0118',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/183cfea4-9421-45bf-bf15-1c7efa9e0118?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/183cfea4-9421-45bf-bf15-1c7efa9e0118?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/183cfea4-9421-45bf-bf15-1c7efa9e0118?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/183cfea4-9421-45bf-bf15-1c7efa9e0118?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 290735,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 10535,
        [Symbol(triggerId)]: 10533,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': '6aaf88cf-1995-4669-9a49-3175ce518659',
      'x-runtime': '0.004362',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/183cfea4-9421-45bf-bf15-1c7efa9e0118',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/183cfea4-9421-45bf-bf15-1c7efa9e0118?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/183cfea4-9421-45bf-bf15-1c7efa9e0118?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 6: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/86dd616f-0704-46c8-82ed-302008f0c47e',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/86dd616f-0704-46c8-82ed-302008f0c47e?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/86dd616f-0704-46c8-82ed-302008f0c47e?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/86dd616f-0704-46c8-82ed-302008f0c47e?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/86dd616f-0704-46c8-82ed-302008f0c47e?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 292957,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 11158,
        [Symbol(triggerId)]: 11156,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': 'c42bff15-0f1e-4b18-b046-3ea435d49691',
      'x-runtime': '0.004458',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/86dd616f-0704-46c8-82ed-302008f0c47e',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/86dd616f-0704-46c8-82ed-302008f0c47e?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/86dd616f-0704-46c8-82ed-302008f0c47e?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 7: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/59284e80-3080-4f6b-8658-6bd154091a47',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/59284e80-3080-4f6b-8658-6bd154091a47?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/59284e80-3080-4f6b-8658-6bd154091a47?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/59284e80-3080-4f6b-8658-6bd154091a47?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/59284e80-3080-4f6b-8658-6bd154091a47?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 295315,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 11783,
        [Symbol(triggerId)]: 11781,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': 'cea22daf-b9b5-493a-8384-c1ca4e372227',
      'x-runtime': '0.007868',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/59284e80-3080-4f6b-8658-6bd154091a47',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/59284e80-3080-4f6b-8658-6bd154091a47?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/59284e80-3080-4f6b-8658-6bd154091a47?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 8: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/b9da7e7b-858f-411a-bf79-cb1a9dfbc34e',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/b9da7e7b-858f-411a-bf79-cb1a9dfbc34e?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/b9da7e7b-858f-411a-bf79-cb1a9dfbc34e?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/b9da7e7b-858f-411a-bf79-cb1a9dfbc34e?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/b9da7e7b-858f-411a-bf79-cb1a9dfbc34e?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 297627,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 12406,
        [Symbol(triggerId)]: 12404,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': 'ad4ac5c7-25b3-428e-9e0c-b97862506c62',
      'x-runtime': '0.006959',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/b9da7e7b-858f-411a-bf79-cb1a9dfbc34e',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/b9da7e7b-858f-411a-bf79-cb1a9dfbc34e?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/b9da7e7b-858f-411a-bf79-cb1a9dfbc34e?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 9: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/ff2cded4-1f62-4689-b392-87d262e7725b',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/ff2cded4-1f62-4689-b392-87d262e7725b?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/ff2cded4-1f62-4689-b392-87d262e7725b?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/ff2cded4-1f62-4689-b392-87d262e7725b?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/ff2cded4-1f62-4689-b392-87d262e7725b?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 299980,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 13031,
        [Symbol(triggerId)]: 13029,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': '198181dc-fa34-47d4-b2e4-3637dc7c4b50',
      'x-runtime': '0.006397',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/ff2cded4-1f62-4689-b392-87d262e7725b',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/ff2cded4-1f62-4689-b392-87d262e7725b?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/ff2cded4-1f62-4689-b392-87d262e7725b?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 10: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/12e614dc-e3e1-46b7-9c64-7c103323b4db',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/12e614dc-e3e1-46b7-9c64-7c103323b4db?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/12e614dc-e3e1-46b7-9c64-7c103323b4db?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/12e614dc-e3e1-46b7-9c64-7c103323b4db?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/12e614dc-e3e1-46b7-9c64-7c103323b4db?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 302353,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 13656,
        [Symbol(triggerId)]: 13654,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': '4c35970c-c960-48c5-b99d-9b13de90a8a0',
      'x-runtime': '0.007140',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/12e614dc-e3e1-46b7-9c64-7c103323b4db',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/12e614dc-e3e1-46b7-9c64-7c103323b4db?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/12e614dc-e3e1-46b7-9c64-7c103323b4db?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 1: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/08ec544c-87a2-4dcd-9e08-9ca3eeeb7349',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/08ec544c-87a2-4dcd-9e08-9ca3eeeb7349?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/08ec544c-87a2-4dcd-9e08-9ca3eeeb7349?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/08ec544c-87a2-4dcd-9e08-9ca3eeeb7349?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/08ec544c-87a2-4dcd-9e08-9ca3eeeb7349?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 851813,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 16215,
        [Symbol(triggerId)]: 16213,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': 'b17ec15c-2bee-4a58-a956-c3c1032489b9',
      'x-runtime': '0.003365',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/08ec544c-87a2-4dcd-9e08-9ca3eeeb7349',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/08ec544c-87a2-4dcd-9e08-9ca3eeeb7349?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/08ec544c-87a2-4dcd-9e08-9ca3eeeb7349?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 2: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/2f4cf4bf-9f18-4ba3-8128-4c875b3817fd',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/2f4cf4bf-9f18-4ba3-8128-4c875b3817fd?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/2f4cf4bf-9f18-4ba3-8128-4c875b3817fd?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/2f4cf4bf-9f18-4ba3-8128-4c875b3817fd?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/2f4cf4bf-9f18-4ba3-8128-4c875b3817fd?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 853975,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 16839,
        [Symbol(triggerId)]: 16837,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': '01867b7f-134d-4e2f-82d4-c98a760e9a04',
      'x-runtime': '0.003576',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/2f4cf4bf-9f18-4ba3-8128-4c875b3817fd',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/2f4cf4bf-9f18-4ba3-8128-4c875b3817fd?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/2f4cf4bf-9f18-4ba3-8128-4c875b3817fd?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 3: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/c6511777-0dc6-428e-ac22-fb3550e6644d',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/c6511777-0dc6-428e-ac22-fb3550e6644d?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/c6511777-0dc6-428e-ac22-fb3550e6644d?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/c6511777-0dc6-428e-ac22-fb3550e6644d?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/c6511777-0dc6-428e-ac22-fb3550e6644d?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 856191,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 17465,
        [Symbol(triggerId)]: 17463,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': '5a2f2891-2b40-402d-aa38-2f88f7afb562',
      'x-runtime': '0.004456',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/c6511777-0dc6-428e-ac22-fb3550e6644d',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/c6511777-0dc6-428e-ac22-fb3550e6644d?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/c6511777-0dc6-428e-ac22-fb3550e6644d?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 4: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/16855653-d14c-489e-acbd-0c4ec2983614',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/16855653-d14c-489e-acbd-0c4ec2983614?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/16855653-d14c-489e-acbd-0c4ec2983614?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/16855653-d14c-489e-acbd-0c4ec2983614?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/16855653-d14c-489e-acbd-0c4ec2983614?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 858471,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 18086,
        [Symbol(triggerId)]: 18084,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': 'c60c41b2-6c7f-42f7-8247-08a2b245c538',
      'x-runtime': '0.005032',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/16855653-d14c-489e-acbd-0c4ec2983614',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/16855653-d14c-489e-acbd-0c4ec2983614?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/16855653-d14c-489e-acbd-0c4ec2983614?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 5: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/8a646055-21fa-4fec-a1cb-ee03d1dbc1c5',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/8a646055-21fa-4fec-a1cb-ee03d1dbc1c5?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/8a646055-21fa-4fec-a1cb-ee03d1dbc1c5?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/8a646055-21fa-4fec-a1cb-ee03d1dbc1c5?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/8a646055-21fa-4fec-a1cb-ee03d1dbc1c5?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 860705,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 18707,
        [Symbol(triggerId)]: 18705,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': 'bda94c82-493d-49ec-aace-2825eefbfeba',
      'x-runtime': '0.004484',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/8a646055-21fa-4fec-a1cb-ee03d1dbc1c5',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/8a646055-21fa-4fec-a1cb-ee03d1dbc1c5?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/8a646055-21fa-4fec-a1cb-ee03d1dbc1c5?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 6: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/242deac0-1771-4f98-b54f-a028e9f5efcc',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/242deac0-1771-4f98-b54f-a028e9f5efcc?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/242deac0-1771-4f98-b54f-a028e9f5efcc?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/242deac0-1771-4f98-b54f-a028e9f5efcc?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/242deac0-1771-4f98-b54f-a028e9f5efcc?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 862946,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 19330,
        [Symbol(triggerId)]: 19328,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': '7e03ba26-5f2f-473f-9bdd-f7fe2023fe43',
      'x-runtime': '0.004714',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/242deac0-1771-4f98-b54f-a028e9f5efcc',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/242deac0-1771-4f98-b54f-a028e9f5efcc?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/242deac0-1771-4f98-b54f-a028e9f5efcc?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 7: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/964bcce0-e3a8-41e1-bc05-b184d826557c',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/964bcce0-e3a8-41e1-bc05-b184d826557c?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/964bcce0-e3a8-41e1-bc05-b184d826557c?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/964bcce0-e3a8-41e1-bc05-b184d826557c?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/964bcce0-e3a8-41e1-bc05-b184d826557c?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 865315,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 19955,
        [Symbol(triggerId)]: 19953,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': 'bf9d517b-0bbc-4e21-912d-9c80b0b71024',
      'x-runtime': '0.007288',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/964bcce0-e3a8-41e1-bc05-b184d826557c',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/964bcce0-e3a8-41e1-bc05-b184d826557c?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/964bcce0-e3a8-41e1-bc05-b184d826557c?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 8: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/5a7cca52-562b-42cd-a79d-2d60d1bc5791',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/5a7cca52-562b-42cd-a79d-2d60d1bc5791?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/5a7cca52-562b-42cd-a79d-2d60d1bc5791?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/5a7cca52-562b-42cd-a79d-2d60d1bc5791?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/5a7cca52-562b-42cd-a79d-2d60d1bc5791?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 867627,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 20580,
        [Symbol(triggerId)]: 20578,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': '3a990b7b-62ac-49f9-b388-944a82da1cb2',
      'x-runtime': '0.006933',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/5a7cca52-562b-42cd-a79d-2d60d1bc5791',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/5a7cca52-562b-42cd-a79d-2d60d1bc5791?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/5a7cca52-562b-42cd-a79d-2d60d1bc5791?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 9: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/5fe6167c-fbc0-41ac-b93c-f1131df8c728',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/5fe6167c-fbc0-41ac-b93c-f1131df8c728?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/5fe6167c-fbc0-41ac-b93c-f1131df8c728?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/5fe6167c-fbc0-41ac-b93c-f1131df8c728?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/5fe6167c-fbc0-41ac-b93c-f1131df8c728?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 869983,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 21205,
        [Symbol(triggerId)]: 21203,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': 'ce6d40b5-2dfd-41ca-a356-4f6c6ea5f00c',
      'x-runtime': '0.006996',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/5fe6167c-fbc0-41ac-b93c-f1131df8c728',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/5fe6167c-fbc0-41ac-b93c-f1131df8c728?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/5fe6167c-fbc0-41ac-b93c-f1131df8c728?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
[Judge] Polling error on attempt 2: Request failed with status code 400
[Judge] Polling error on attempt 3: Request failed with status code 400
[Judge] Polling error on attempt 4: Request failed with status code 400
[Judge] Polling error on attempt 5: Request failed with status code 400
[Judge] Polling error on attempt 6: Request failed with status code 400
[Judge] Polling error on attempt 7: Request failed with status code 400
[Judge] Polling error on attempt 8: Request failed with status code 400
[Judge] Polling error on attempt 9: Request failed with status code 400
[Judge] Polling error on attempt 10: Request failed with status code 400
[Judge] Polling error on attempt 11: Request failed with status code 400
[Judge] Polling error on attempt 12: Request failed with status code 400
[Judge] Polling error on attempt 13: Request failed with status code 400
[Judge] Polling error on attempt 14: Request failed with status code 400
[Judge] Polling error on attempt 15: Request failed with status code 400
[Judge] Polling error on attempt 16: Request failed with status code 400
[Judge] Polling error on attempt 17: Request failed with status code 400
[Judge] Polling error on attempt 18: Request failed with status code 400
[Judge] Polling error on attempt 19: Request failed with status code 400
[Judge] Polling error on attempt 20: Request failed with status code 400
[Judge] Polling error on attempt 21: Request failed with status code 400
[Judge] Polling error on attempt 22: Request failed with status code 400
[Judge] Polling error on attempt 23: Request failed with status code 400
[Judge] Polling error on attempt 24: Request failed with status code 400
[Judge] Polling error on attempt 25: Request failed with status code 400
[Judge] Polling error on attempt 26: Request failed with status code 400
[Judge] Polling error on attempt 27: Request failed with status code 400
[Judge] Polling error on attempt 28: Request failed with status code 400
[Judge] Polling error on attempt 29: Request failed with status code 400
[Judge] Polling error on attempt 30: Request failed with status code 400
[Judge] Error processing test case 10: AxiosError: Request failed with status code 400
    at settle (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:2053:12)
    at IncomingMessage.handleStreamEnd (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:3170:11)
    at IncomingMessage.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
    at Axios.request (/home/saramasathiphat/test-smith/packages/backend/node_modules/axios/dist/node/axios.cjs:4280:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async SubmissionService.getJudge0Result (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:291:26)
    at async SubmissionService.judge (/home/saramasathiphat/test-smith/packages/backend/services/SubmissionService.js:106:26) {
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 5000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.10.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    params: { base64_encoded: 'false', fields: '*' },
    method: 'get',
    url: 'http://localhost:2358/submissions/32554a22-9e79-4ddf-b90f-8b0604a53b0e',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /submissions/32554a22-9e79-4ddf-b90f-8b0604a53b0e?base64_encoded=false&fields=* HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.10.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:2358\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype],
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/submissions/32554a22-9e79-4ddf-b90f-8b0604a53b0e?base64_encoded=false&fields=*',
    _ended: true,
    res: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:2358/submissions/32554a22-9e79-4ddf-b90f-8b0604a53b0e?base64_encoded=false&fields=*',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 12,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: true,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: [Object],
      _writableState: [WritableState],
      _maxListeners: undefined,
      _options: [Object],
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:2358/submissions/32554a22-9e79-4ddf-b90f-8b0604a53b0e?base64_encoded=false&fields=*',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 872374,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 21832,
        [Symbol(triggerId)]: 21830,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'user-agent': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      'content-type': 'application/json; charset=utf-8',
      'cache-control': 'no-cache',
      'x-request-id': '67fa7143-1bc9-4c44-88c0-42357f41f665',
      'x-runtime': '0.007358',
      vary: 'Origin',
      'transfer-encoding': 'chunked'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 5000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      params: [Object],
      method: 'get',
      url: 'http://localhost:2358/submissions/32554a22-9e79-4ddf-b90f-8b0604a53b0e',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /submissions/32554a22-9e79-4ddf-b90f-8b0604a53b0e?base64_encoded=false&fields=* HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.10.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:2358\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/submissions/32554a22-9e79-4ddf-b90f-8b0604a53b0e?base64_encoded=false&fields=*',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Writable],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      error: 'some attributes for this submission cannot be converted to UTF-8, use base64_encoded=true query parameter'
    }
  },
  status: 400
}
Could not download config for kevinandcyrene-date: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for khaslana: {}
Could not download config for phainonkhaslanatreepaths: {}
Global Error Handler: {
  message: 'Failed to get SearchSmith results.',
  stack: undefined,
  url: '/api/problems/searchsmith-results',
  method: 'POST',
  timestamp: '2025-08-03T08:07:43.595Z'
}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for khaslana: {}
Could not download config for kevinandcyrene-date: {}
Global Error Handler: {
  message: 'Failed to get SearchSmith results.',
  stack: undefined,
  url: '/api/problems/searchsmith-results',
  method: 'POST',
  timestamp: '2025-08-03T08:39:40.764Z'
}
Could not download config for cuttingwoodtemicide: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for khaslana: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for khaslana: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for khaslana: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for khaslana: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for khaslana: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for khaslana: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for khaslana: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for khaslana: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for khaslana: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for khaslana: {}
Could not download config for khaslana: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for khaslana: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for khaslana: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for khaslana: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for khaslana: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for khaslana: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for khaslana: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for khaslana: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for khaslana: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for khaslana: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for khaslana: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for khaslana: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for khaslana: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for khaslana: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for khaslana: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for phainonkhaslanatreepaths: {}
Global Error Handler: {
  message: 'Failed to get SearchSmith results.',
  stack: undefined,
  url: '/api/problems/searchsmith-results',
  method: 'POST',
  timestamp: '2025-08-12T06:06:23.611Z'
}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for khaslana: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for kevinandcyrene-date: {}
Global Error Handler: {
  message: 'Failed to get SearchSmith results.',
  stack: undefined,
  url: '/api/problems/searchsmith-results',
  method: 'POST',
  timestamp: '2025-08-12T06:06:29.809Z'
}
Could not download config for kevinandcyrene-date: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for khaslana: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for khaslana: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for khaslana: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for khaslana: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for khaslana: {}
Could not download config for tasknamekevinkaslanatreepath: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for khaslana: {}
Could not download config for phainonkhaslanatreepaths: {}
Could not download config for kevinandcyrene-date: {}
Could not download config for cuttingwoodtemicide: {}
Could not download config for tasknamekevinkaslanatreepath: {}
